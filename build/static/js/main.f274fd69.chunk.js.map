{"version":3,"sources":["firebase_config.js","firebase.js","providers/ReservationsProvider.js","components/MainLabel.js","components/MakeReservationBtn.js","components/Reservation.js","components/ReservationsList.js","providers/UserProvider.js","components/Application.js","App.js","serviceWorker.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebase","initializeApp","provider","auth","GoogleAuthProvider","signInWithGoogle","signInWithPopup","firestore","window","storage","checkUserUid","a","email","doc","snapshot","console","log","id","storeReservationInStorage","startTime","endTime","collection","set","user","currentUser","ReservationsContext","createContext","ReservationsProvider","state","reservations","unsubscribeFromFirestore","componentDidMount","orderBy","onSnapshot","docs","map","mapper","setState","componentWillUnmount","this","isReserved","some","reservation","currentTime","Date","path","toDate","hasCurrentReservation","children","props","Provider","value","Component","data","renderWithStyles","curry","sectionStyle","style","className","MainLabel","useContext","getStartDate","getEndDate","setHours","getHours","MakeReservation","disabled","color","onClick","Reservation","moment","calendar","ReservationsList","key","UserContext","UserProvider","unsubscribeFromAuth","onAuthStateChanged","userAuth","userRef","uid","Application","App","rel","type","href","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f274fd69.chunk.js","sourcesContent":["const firebaseConfig = {\n    apiKey: \"\",\n    authDomain: \"\",\n    databaseURL: \"\",\n    projectId: \"\",\n    storageBucket: \"\",\n    messagingSenderId: \"\",\n    appId: \"\"\n  };\n\nexport default firebaseConfig;","import firebase from \"firebase/app\"\nimport 'firebase/auth';\nimport 'firebase/storage';\nimport 'firebase/firestore';\nimport firebaseConfig from './firebase_config';\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport const firestore = firebase.firestore();\n\nexport const auth = firebase.auth();\nwindow.auth = auth;\nexport const storage = firebase.storage();\n\nexport const getAllReservations = () => {\n  return firestore.collection('reservations').get();\n}\n\nexport const checkUserUid = async ({email}) => {\n  if (!email) return null;\n  const snapshot = await firestore.doc(`users/${email}`);\n  console.log(snapshot);\n  if(snapshot.id) {\n    return snapshot;\n  }\n};\n\nexport function storeReservationInStorage(startTime, endTime) {\n  firestore.collection('reservations')\n  .doc()\n  .set({\n    startTime: startTime,\n    endTime: endTime,\n    user: auth.currentUser.email\n})};\n\nwindow.firestore = firestore;","import React, { Component, createContext } from 'react'\nimport { firestore } from '../firebase';\nimport { path } from 'ramda';\n\nexport const ReservationsContext = createContext();\n\nclass ReservationsProvider extends Component {\n    state = {reservations : []};\n\n    unsubscribeFromFirestore = null;\n\n    componentDidMount = () => {\n        this.unsubscribeFromFirestore = firestore.collection('reservations').orderBy(\"startTime\",\"desc\").onSnapshot(snapshot => {\n            const reservations = snapshot.docs.map(mapper);\n            this.setState({reservations});\n        });\n      }\n\n    componentWillUnmount = () => {\n        this.unsubscribeFromFirestore();\n    }\n\n    render() {\n        const { reservations } = this.state || {};\n        const isReserved = hasCurrentReservation(reservations);\n        const { children } = this.props;\n        return (\n          <ReservationsContext.Provider value={ {reservations: reservations, isReserved} }>{children}</ReservationsContext.Provider>\n        )\n      }\n}\nexport default ReservationsProvider;\n\nfunction mapper(doc){\n    return {\n        id: doc.id,\n        data: doc.data()\n    }\n}\n\nfunction hasCurrentReservation(reservations) {\n    console.log(reservations);\n    return reservations.some((reservation) => {\n        const currentTime = new Date();\n        return path(['data', 'startTime'], reservation).toDate() < currentTime && path(['data', 'endTime'], reservation).toDate() > currentTime\n    })\n}","import React, { useContext } from 'react';\nimport { ReservationsContext } from '../providers/ReservationsProvider';\nimport { curry } from 'ramda';\n\nfunction render(sectionStyle, isReserved) {\n  return <section style={ sectionStyle } className={ isReserved ? \"hero is-danger\" : \"hero is-primary\"}>\n    <div className=\"hero-body\">\n      <div className=\"container\">\n        <h1 className=\"title\">\n          {isReserved ? \"Busy\" : \"Free\"}\n        </h1>\n      </div>\n    </div>\n  </section>;\n}\n\nfunction getStyles() {\n  return {\n    'marginBottom': '20px'\n  }\n}\n\nconst renderWithStyles = curry(render)(getStyles());\n\n\nexport default function MainLabel() {\n  const { isReserved } = useContext(ReservationsContext);\n  return renderWithStyles(isReserved);\n}","import React, { useContext } from 'react';\nimport { Button } from \"react-bulma-components\";\nimport {storeReservationInStorage } from '../firebase';\nimport { ReservationsContext } from '../providers/ReservationsProvider';\n\nfunction getReservationDates() {\n    return [getStartDate(), getEndDate()];\n}\n\nfunction getStartDate() {\n    return new Date(); \n}\n\nfunction getEndDate() {\n    const endTime = getStartDate();\n    endTime.setHours(endTime.getHours() + 1);\n    return endTime;\n}\n\nexport default function MakeReservation() {\n\n    const {isReserved} = useContext(ReservationsContext);\n\n    const storeReservation = function() {\n        if(isReserved) {\n            return;\n        }\n        storeReservationInStorage(...getReservationDates());\n\n    }\n    return (<Button disabled={isReserved} color=\"primary\" onClick={storeReservation}> Reserve now </Button>)\n}","import React from 'react';\nimport moment from 'moment';\n\nconst Reservation = (props) => {\n    const {startTime, endTime, user} = props.data;\n\n    return (<tr>\n            <td>{moment(startTime.toDate()).calendar()}</td>\n            <td>{moment(endTime.toDate()).calendar()}</td>\n            <td>{user}</td>\n        </tr>);\n} \n\nexport default Reservation;","import React, { useContext } from 'react';\nimport { ReservationsContext } from '../providers/ReservationsProvider';\nimport Reservation from './Reservation';\n\nconst ReservationsList = () => {\n    const {reservations} = useContext(ReservationsContext);\n\n    return (\n        <table className=\"table\">\n            <thead>\n                <tr>\n                    <td>Start Date:</td>\n                    <td>End Date:</td>\n                    <td>User:</td>\n                </tr>\n            </thead>\n            <tbody>\n                {reservations.map(reservation => <Reservation {...reservation} key={reservation.id} />) }\n            </tbody>\n        </table>\n    )\n}\n\nexport default ReservationsList;","import React, { Component, createContext } from 'react'\nimport { auth, checkUserUid } from '../firebase';\n\nexport const UserContext = createContext({ user: null });\n\nclass UserProvider extends Component {\n    state = {\n      user: null,\n    };\n  \n    unsubscribeFromAuth = null;\n  \n    componentDidMount = async () => {\n      this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n        if (userAuth) {\n          const userRef = await checkUserUid(userAuth);\n          if(userRef) {\n            userRef.onSnapshot(snapshot => {\n              this.setState({ user: { uid: snapshot.id, ...snapshot.data() } })\n            });\n          }\n        }\n      });\n    };\n  \n    componentWillUnmount = () => {\n      this.unsubscribeFromAuth();\n    };\n  \n    render() {\n      const {user} = this.state;\n      const { children } = this.props;\n  \n      return (\n        <UserContext.Provider value={user}>{children}</UserContext.Provider>\n      )\n    }\n  }\n  \nexport default UserProvider;","import React, {useContext} from 'react';\nimport MainLabel from './MainLabel';\nimport {signInWithGoogle} from '../firebase';\nimport MakeReservation from './MakeReservationBtn'\nimport ResevationsProvider from '../providers/ReservationsProvider';\nimport ReservationsList from './ReservationsList';\nimport {UserContext} from '../providers/UserProvider';\n\nfunction Application(){ \n    const snapshot = useContext(UserContext);\n    if (snapshot) {\n        return (\n            <ResevationsProvider>\n                <MainLabel/>\n                <MakeReservation/>\n                <ReservationsList/>\n            </ResevationsProvider>)\n    } else {\n        return (<button onClick={signInWithGoogle}>Sign In With Google</button>)\n    }\n}\n\nexport default Application;","import React from 'react';\nimport Application from './components/Application';\nimport UserProvider from './providers/UserProvider';\n\nfunction App() {\n\n  return (\n\n    <div className=\"App\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"src/bulma.min.css\"/>\n        <UserProvider>\n          <Application/>\n        </UserProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}